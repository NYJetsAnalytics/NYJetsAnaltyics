##########################################################
#  
#    daRnold's Jets Analytics
#    Scoring that result in negative WPA
#    9/24/2019
#
##########################################################

#load packages needed
library(nflscrapR)
library(teamcolors)
library(dplyr)
library(magrittr)
library(ggplot2)
library(tidyverse)
library(ggimage)
library(scales)

#optionanal packages I use for fonts while plotting
#library(extrafont)
#library(extrafontdb)

#pull 2019 season data (this will take a while)
season_2019 <- scrape_season_play_by_play(2019, type="reg")

#read in team logos
nfl_logos_df <- read_csv("https://raw.githubusercontent.com/statsbylopez/BlogPosts/master/nfl_teamlogos.csv")

#join logos into season_2019 df
season_2019 <- season_2019 %>% left_join(nfl_logos_df, by = c("posteam" = "team_code"))

# Pull out Jets colors (used in title color and border color) - optional for nonteam specific accounts
nfl_teamcolors <- teamcolors %>% filter(league == "nfl")
nyj_color <- nfl_teamcolors %>%
  filter(name == "New York Jets") %>%
  pull(primary)

#create new variable, filter by field goals made which added negative or 0 WPA. optional for this chart. I was just eyeballing some data here
fg_made_2019 <- season_2019 %>%
  filter(field_goal_result == "made")

#create new variable "bad field goals" that resulted in a drop in winning percentage (WPA <0)
bad_fg_made_2019 <- season_2019 %>%
  filter(field_goal_result == "made", wpa<0)

#get team averages for avg yardline kicked from. again, optional. mostly curious and wanted to add the league avg to the chart
fg_avg_ydline<- fg_made_2019 %>%
  group_by(posteam) %>%
  summarize(mean_ydline=mean(yardline_100))%>%
  arrange(posteam)
fg_avg_ydline <- mean(fg_avg_ydline$mean_ydline)
fg_avg_ydline

#Optional - Create a simple wrapper function that you can use for managing annotation labels
wrapper <- function(x, ...) paste(strwrap(x, ...), collapse = "\n")

#WPA vs Yard Line Plot
bad_fg_made_2019 %>%
  ggplot(aes(x=yardline_100, y=wpa*100))+
  geom_image(aes(image = url), size = 0.05, by = "width", asp =1.8) + #use images instead of points. Size, by, and asp arguments essential for correctly formaing 
  scale_x_reverse(breaks=seq(0, 40, 5))+ #reverse X scale so that goaline is to the far right of plot
  geom_vline(xintercept = fg_avg_ydline, linetype="dashed", color="black", size =.5)+ #dashed vert line for NFL average
  annotate("label", x = fg_avg_ydline, y = -2.5, label = ("NFL Avg. - 18.746 Yard Line"), color = "red", size=4) + #lables dashed line. use wrapper function defined above. 
  labs(x = "Yard Line",
       y = "WPA",
       caption = "@NYJetsAnalytics, data from @nflscrapR",
       title = "Think Before You Kick",
       subtitle = "Field Goals That Hurt Teams' Chances to Win (Weeks 1-3)"
  ) +
  theme(panel.background = element_rect(fill = "white", color = nyj_color), #white fill, NYJ colors border
        panel.grid.major.x = element_line(color = "grey88"), #soft grey grid lines
        panel.grid.major.y = element_line(color = "grey88"), 
        panel.grid.minor.y = element_line(color = "grey88"), 
        plot.title=element_text(size=20, 
                                color= nyj_color,
                                hjust=0.5,
                                family = "Arial Black", 
                                lineheight=2),  # title
        plot.subtitle=element_text(size=18,
                                   family = "Arial Narrow",
                                   hjust=0.5),  # subtitle
        plot.caption=element_text(size=12,
                                  color = nyj_color,
                                  family = "Arial Black",
                                  hjust = 1),  # caption
        axis.title.x=element_text(vjust=-2.5,  
                                  size=15,
                                  family="Arial Black"),  # X axis title
        axis.title.y=element_text(size=15, 
                                  family = "Arial Black")  # Y axis title
  )

#use ggsave command for high resolution image quality. highest quality recommended is dpi =1000. This generates a file to big for twitter in my experience
ggsave("Think Before You Kink (WPA vs Yard Line).png", path="%local save path here%",dpi = 800)


#WPA vs Score Differential
bad_fg_made_2019 %>%
  ggplot(aes(x=score_differential, y=wpa))+
  geom_image(aes(image = url), size = 0.05, by = "width", asp =1.8) +
  scale_x_continuous(breaks = seq(-20,40, 5))+
  scale_y_continuous(labels = scales::percent_format(accuracy = 1))+
  labs(x = "Score Differential",
       y = "WPA",
       caption = "@NYJetsAnalytics, data from @nflscrapR",
       title = "Think Before You Kick",
       subtitle = "Field Goals That Hurt Teams' Chances to Win (Weeks 1-3)"
  ) +
  theme(panel.background = element_rect(fill = "white", color = nyj_color),
        panel.grid.major.x = element_line(color = "grey88"), 
        panel.grid.major.y = element_line(color = "grey88"), 
        panel.grid.minor.y = element_line(color = "grey88"), 
        plot.title=element_text(size=20, 
                                color= nyj_color,
                                hjust=0.5,
                                family = "Arial Black",
                                lineheight=2),  # title
        plot.subtitle=element_text(size=18,
                                   family = "Arial Narrow",
                                   hjust=0.5),  # subtitle
        plot.caption=element_text(size=12,
                                  color = nyj_color,
                                  family = "Arial Black",
                                  hjust = 1),  # caption
        axis.title.x=element_text(  size=15,
                                  family="Arial Black"),  # X axis title
        axis.title.y=element_text(size=15, 
                                  family = "Arial Black")  # Y axis title
  )

ggsave("Think Before You Kick (WPA vs Score Diff).png", path="%local save path here%",dpi = 800)
